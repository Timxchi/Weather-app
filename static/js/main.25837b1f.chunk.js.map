{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","tiedot","map","tieto","key","dt","dt_txt","main","temp","humidity","weather","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","list","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25837b1f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Titles extends Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1 className=\"title\">Weather application</h1>\r\n                <p className=\"subtitle\">Find out 5 day forecast in your area...</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Titles;","import React, {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n                <button className=\"submitbtn\">Get weather</button>\r\n            </form>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Form;","import React, {Component} from 'react';  \r\n\r\nclass Weather extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"weather-info\">\r\n                {\r\n                this.props.city && this.props.country && <p className=\"weather-titletext\">Location: \r\n                    <span> {this.props.city}, {this.props.country}</span>\r\n                </p>\r\n                }\r\n                {\r\n                this.props.tiedot.map((tieto)=>{return <p className=\"weather-titletext\" key={tieto.dt}>Date: \r\n                        <span> {tieto.dt_txt}</span>\r\n                    , Temperature: \r\n                        <span> {tieto.main.temp}</span>\r\n                    , Humidity: \r\n                        <span> {tieto.main.humidity}</span>\r\n                    , Condition: \r\n                        <span> {tieto.weather[0].description}</span>\r\n                </p>})\r\n                }\r\n                {\r\n                this.props.error && <p className=\"errormsg\"> {this.props.error}</p>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Weather;","import React, {Component} from 'react';\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = '166544dbe0c029db97ff980a7f2cf76c';\n\nclass App extends Component {\n  \n  state = {\n    city: undefined,\n    country: undefined,\n    tiedot: [],\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    console.log(data);\n    \n\n    if (city && country){\n      this.setState({\n        city: data.city.name,\n        country: data.city.country,\n        tiedot: data.list,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        city: undefined,\n        country: undefined,\n        tiedot: [],\n        error: \"Please enter the values.\"\n      })\n    }\n    console.log(this.state.tiedot);\n  }\n  render(){\n    return(\n      <div>\n        <div className=\"header headerheader\">\n          <Titles />\n        </div>\n          <div className=\"row\">\n            <div className=\"column sidecolumn\">\n            </div>\n            <div className=\"column maincolumn\">\n              <Form getWeather={this.getWeather}/>\n              <Weather \n                city={this.state.city}\n                country={this.state.country}\n                tiedot={this.state.tiedot}\n                error={this.state.error}/>\n            </div>\n            <div className=\"column sidecolumn\">\n            </div>\n          </div>\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}